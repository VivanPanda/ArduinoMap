"use strict";(self.webpackChunkarduinomap=self.webpackChunkarduinomap||[]).push([[740],{1470:(e,n,t)=>{t.d(n,{A:()=>y});var s=t(6540),r=t(4164),i=t(3104),o=t(6347),a=t(205),l=t(7485),u=t(1682),c=t(679);function d(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s}))}(t);return function(e){const n=(0,u.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function b({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=h(e),[o,l]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i})),[u,d]=b({queryString:t,groupId:r}),[m,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,c.Dv)(n);return[t,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),f=(()=>{const e=u??m;return p({value:e,tabValues:i})?e:null})();(0,a.A)(()=>{f&&l(f)},[f]);return{selectedValue:o,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)},[d,g,i]),tabValues:i}}var g=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function w({className:e,block:n,selectedValue:t,selectValue:s,tabValues:o}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=e=>{const n=e.currentTarget,r=a.indexOf(n),i=o[r].value;i!==t&&(l(n),s(i))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:s})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:c,onClick:u,...s,className:(0,r.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===t);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,x.jsx)(w,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:d(e.children)},String(n))}},2846:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/push-button-wiring-diagram-804a235727622936de5e4cb3c58a3ae7.png"},3786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"week-4/push-buttons","title":"Push Buttons","description":"A push button is a simple and handy component we can use to take user input into our projects. They work by completing a circuit when pressed, and opening (breaking) it when the button is released. They don\u2019t have polarity, so they can be connected in either orientation.","source":"@site/docs/week-4/push-buttons.md","sourceDirName":"week-4","slug":"/week-4/push-buttons","permalink":"/week-4/push-buttons","draft":false,"unlisted":false,"editUrl":"https://github.com/vivanpanda/arduinomap/tree/main/docs/week-4/push-buttons.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Arrays and Strings","permalink":"/week-4/arrays-and-strings"},"next":{"title":"Tilt Sensors","permalink":"/week-4/tilt-sensors"}}');var r=t(4848),i=t(8453),o=t(1470),a=t(9365);const l={sidebar_position:2},u="Push Buttons",c={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Pull-up and pull-down resistors",id:"pull-up-and-pull-down-resistors",level:3},{value:"Constructing your circuit",id:"constructing-your-circuit",level:2},{value:"Programming your push button",id:"programming-your-push-button",level:2},{value:"Assignment",id:"assignment",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"push-buttons",children:"Push Buttons"})}),"\n",(0,r.jsx)(n.p,{children:"A push button is a simple and handy component we can use to take user input into our projects. They work by completing a circuit when pressed, and opening (breaking) it when the button is released. They don\u2019t have polarity, so they can be connected in either orientation."}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,r.jsx)(n.p,{children:"A push button consists of 4 pins - with 2 on either side being internally connected. When the button is pushed, the two sides are connected, allowing current to flow and complete the circuit. When the button is not pressed, these pairs of pins are not connected."}),"\n",(0,r.jsx)("div",{class:"img-center",children:(0,r.jsx)(n.img,{alt:"Push button connection",src:t(5519).A+"",width:"1680",height:"752"})}),"\n",(0,r.jsx)(n.h3,{id:"pull-up-and-pull-down-resistors",children:"Pull-up and pull-down resistors"}),"\n",(0,r.jsxs)(n.p,{children:["When we connect a push button to our Arduino board input pin, the input can be ",(0,r.jsx)(n.code,{children:"floating"}),". This means that the microcontroller reads unpredictable values since it cannot decide firmly between HIGH and LOW."]}),"\n",(0,r.jsx)(n.p,{children:"To go around this problem, we must use a pull-down or pull-up resistor:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pull-down resistors connect between the input pin and GND.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When the button isn't pressed, the input reads ",(0,r.jsx)(n.code,{children:"LOW"})," (0V), and when the button is pressed, the input reads ",(0,r.jsx)(n.code,{children:"HIGH"})," (5V)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Pull-up resistors connect between the input pin and 5V.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When the button isn't pressed, the input reads ",(0,r.jsx)(n.code,{children:"HIGH"})," (0V), and when the button is pressed, the input reads ",(0,r.jsx)(n.code,{children:"LOW"})," (5V)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Luckily, Arduino's digital pins have in-built pull-up resistors which we can use without having to connect external resistors. To do this, we must set the ",(0,r.jsx)(n.code,{children:"pinMode()"})," to ",(0,r.jsx)(n.code,{children:"INPUT_PULLUP"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"pinMode(buttonPin, INPUT_PULLUP);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"constructing-your-circuit",children:"Constructing your circuit"}),"\n",(0,r.jsx)(n.p,{children:"Components required:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1x Push button"}),"\n",(0,r.jsx)(n.li,{children:"Your Arduino board"}),"\n",(0,r.jsx)(n.li,{children:"Breadboard"}),"\n",(0,r.jsx)(n.li,{children:"Jumper wires"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Try it yourself",type:"info",children:(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(a.A,{value:"problem",label:"Problem",children:[(0,r.jsx)(n.p,{children:"Search up your push button's datasheet online. Datasheets will be your friend when learning about new components since they provide all the necessary information you will need to construct your circuit. Try building your circuit using this schematic:"}),(0,r.jsx)("div",{class:"img-center",children:(0,r.jsx)(n.img,{alt:"Push button schematic",src:t(8737).A+"",width:"1138",height:"1102"})}),(0,r.jsx)("br",{})]}),(0,r.jsxs)(a.A,{value:"solution",label:"Solution",children:[(0,r.jsx)(n.p,{children:"Below is the equivalent circuit diagram for this schematic. Did you hook up your components correctly?"}),(0,r.jsx)("div",{class:"img-center",children:(0,r.jsx)(n.img,{alt:"Button wiring diagram",src:t(2846).A+"",width:"2160",height:"1614"})}),(0,r.jsx)("br",{})]})]})}),"\n",(0,r.jsx)(n.h2,{id:"programming-your-push-button",children:"Programming your push button"}),"\n",(0,r.jsxs)(n.p,{children:["Once you've connected your push button using the schematic above, we will program it. To do this, we will use the ",(0,r.jsx)(n.a,{href:"https://docs.arduino.cc/language-reference/en/functions/digital-io/digitalread/",children:(0,r.jsx)(n.code,{children:"digitalRead()"})})," function and print a message to the serial monitor:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'int buttonPin = 12;  // Push button connected to pin 12\nint buttonState;\n\nvoid setup() {\n  pinMode(buttonPin, INPUT_PULLUP);  // Enable internal pull-up resistor\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  buttonState = digitalRead(buttonPin);\n  if (buttonState == LOW) {\n    Serial.println("Button Pressed");\n  } else {\n    Serial.println("Button Released");\n  }\n  delay(200);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"assignment",children:"Assignment"}),"\n",(0,r.jsxs)(n.admonition,{title:"Your Turn",type:"info",children:[(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Build a simple push button circuit in which an LED is on when the button is pressed, and off when the button is not pressed."}),"\n"]}),(0,r.jsx)(n.admonition,{title:"Challenge",type:"tip",children:(0,r.jsxs)(n.p,{children:["Try to create a ",(0,r.jsx)(n.em,{children:"toggle"})," switch for turning this LED on and off. You can look for help online if stuck."]})})]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"This section includes links to help you dive deeper into the topics from this lesson. It's optional, so don't worry if you choose to skip it."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Read ",(0,r.jsx)(n.a,{href:"https://eepower.com/resistor-guide/resistor-applications/pull-up-resistor-pull-down-resistor/",children:"this"})," to learn more about pull up and pull down resistors."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5519:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/push-button-connected-b4b979370508fe213741352329d643a7.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},8737:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/push-button-schematic-21f711ef1a2a9f028de4c8026ec72a94.png"},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var i=t(4848);function o({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,t),hidden:n,children:e})}}}]);